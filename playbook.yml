---

- hosts: localhost
  name: packages
  remote_user: hanny
  become_user: root
  become_method: sudo
  tags: packages
  tasks:
    - name: install pacman packages
      tags: pacman
      vars:
        packages:
          - ansible
          - arandr
          - atom
          - baobab
          - bind-tools
          - borg
          - calibre
          - chromium
          - cinnamon
          - clang
          - cronie
          - curl
          - docker
          - docker-compose
          - doublecmd-gtk2
          - eog
          - evince
          - fasd
          - firefox
          - fish
          - flashplugin
          - fzf
          - gcc-multilib
          - gdb
          - gedit
          - git
          - gitg
          - glances
          - gnu-netcat
          - gpa
          - gparted
          - gradle
          - gthumb
          - htop
          - httpie
          - iotop
          - iperf
          - iperf3
          - iputils
          - jdk8-openjdk
          - jq
          - jre8-openjdk
          - keepassxc
          - keychain
          - libreoffice-fresh-cs
          - lightdm
          - lightdm-gtk-greeter
          - lldb
          - lvm2
          - maven
          - mc
          - mediainfo
          - meld
          - mitmproxy
          - mlocate
          - moreutils
          - most
          - mtpfs
          - ncdu
          - nemo-fileroller
          - neovim
          - networkmanager
          - opensmtpd
          - pinta
          - pygmentize
          - python-llfuse # required by borg
          - python-neovim
          - qalculate-gtk
          - redshift
          - ruby
          - rustup
          - scala
          - shellcheck
          - smartmontools
          - smem
          - socat
          - sudo
          - sysstat
          - task
          - terminator
          - texlive-langextra
          - texlive-science
          - the_silver_searcher
          - thefuck
          - thunderbird
          - thunderbird-i18n-cs
          - time
          - traceroute
          - transmission-gtk
          - virtualbox
          - virtualbox-guest-dkms
          - visualvm
          - vlc
          - whois
          - xcursor-vanilla-dmz
          - xdg-user-dirs-gtk
      become: true
      pacman:
        name: "{{packages}}"
        state: present
        update_cache: no

    - name: pip packages
      tags: pip
      pip:
        name: bugwarrior
        extra_args: '--user'

    - name: install aur packages
      tags: aur
      vars:
        packages:
          - ammonite
          - bomi
          - clipit
          - cower
          - freerapid
          - git-crypt
          - git-extras
          - intellij-idea-ultimate-edition
          - java-jce_ustrength
          - jd-gui
          - jdk
          - kupfer
          - lnav
          - pacaur
          - pdsh
          - scalafmt
          - skype
          - slack-desktop
      with_items: "{{ packages }}"
      aur: "name={{item}} user=hanny dir=/home/hanny/.cache/pacaur"
      become: true

- hosts: localhost
  name: services
  tags: services
  tasks:
    - name: Enable service
      vars:
        services:
          - docker
          - smtpd
          - cronie
      with_items: "{{ services }}"
      systemd: state=started name={{ item }}

- hosts: localhost
  name: config
  tags: config
  vars:
    aliases:
      undopush: "git push -f origin HEAD^:master"
      gd: "git diff"
      gdc: "git diff --cached"
      ga: "git add"
      gf: "git fetch"
      gca: "git commit -a -m"
      gcm: "git commit -m"
      gbd: "git branch -D"
      gm: "git merge --no-ff"
      gpt: "git push --tags"
      gp: "git push"
      gpl: 'git pull'
      grs: "git reset --soft"
      grh: "git reset --hard"
      gb: "git branch"
      gcob: "git checkout -b"
      gco: "git checkout"
      gba: "git branch -a"
      gcp: "git cherry-pick"
      gl: "git log"
      gs: 'git status'
      gst: 'git stash'
      gsp: 'git stash pop'

      d: 'docker'
      dc: 'docker-compose'
      dcu: 'docker-compose up -d'
      dcd: 'docker-compose down'

      t: task
      tl: task list
      tll: task long
      ts: task start
      td: task done
      tc: task context
      manb: 'man --html=firefox'
      urldecode: 'python2 -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'
      urlencode: 'python2 -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
      yank: 'yank -- xsel -b'
      gradle: './gradlew'
      ccat: 'pygmentize -g -O style=colorful,linenos=1'

    paths:
      - '$HOME/.rbenv/shims'
      - '$HOME"/.bin"'
      - '$HOME"/local/bin"'
      - '/usr/local/bin'
      - '/usr/bin'
      - '/bin'
      - '/usr/local/sbin'
      - '/usr/sbin'
      - '/sbin'
      - '/usr/bin/vendor_perl'
      - '/usr/bin/core_perl'
      - '$HOME"/.gem/ruby/2.4.0/bin"'
      - '$HOME/.local/bin'
      - '$HOME/.cargo/bin'
      - '$HOME/work/atlanta/atlanta-cluster-tools/bin'

    env_variables:
      RUST_SRC_PATH: '~/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/'
      TMPDIR: /tmp
      EDITOR: nvim
      M2_HOME: "/opt/maven"
      _JAVA_OPTIONS: '-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true'
      JAVA_HOME: /usr/lib/jvm/default
      HOSTALIASES: ~/.hosts
      TERM: xterm-color

  pre_tasks:
    - name: Fish config
      copy:
        src: fish
        dest:  ~/.config

    - name: Fish -- oh-my-fish -- install
      shell: curl -L http://get.oh-my.fish > /tmp/install ; fish /tmp/install --noninteractive --yes
      args:
        creates: ~/.config/fish/conf.d/omf.fish

    - name: Fish plugins
      vars:
        fish_plugins:
          - archlinux
          - balias
          - bobthefish
          - extract
          - gi
          - hash
          - keychain
          - kill-on-port
          - mvn
          - sudope
          - thefuck
          - 'https://github.com/brgmnn/fish-docker-compose'

      with_items: "{{ fish_plugins }}"
      shell: fish -c 'omf install {{ item }}'

    - name: Fish theme
      shell: fish -c 'omf theme bobthefish'

    - name: Fish aliases
      with_dict: "{{ aliases }}"
      lineinfile:
        dest: ~/.config/fish/aliases.fish
        line: "balias {{ item.key }} '{{ item.value }}'"
        create: yes

    - name: Fish paths
      lineinfile:
        dest: ~/.config/fish/config.fish
        line: "set -x PATH {{ paths | join (' ') }}"
        regexp: "^set -x PATH.*$"
        create: yes

    - name: Fish env variables
      lineinfile:
        dest: ~/.config/fish/variables.fish
        line: "set -x {{item.key}} '{{item.value}}'"
        create: yes
      with_dict: "{{env_variables}}"

    - name: bash base file
      copy:
        src: config/bashrc
        dest: ~/.bashrc

    - name: bash aliases
      with_dict: "{{ aliases }}"
      lineinfile:
        dest: ~/.config/bash/aliases.sh
        line: "alias {{ item.key }}='{{ item.value }}'"
        create: yes

    - name: bash paths
      lineinfile:
        dest: ~/.bashrc
        line: "export PATH={{ paths | join (':') }}"
        regexp: "^export PATH=.*$"
        create: yes

    - name: Fish env variables
      lineinfile:
        dest: ~/.config/bash/variables.sh
        line: "export {{item.key}}='{{item.value}}'"
        create: yes
      with_dict: "{{env_variables}}"

    - name: bash keychain
      lineinfile:
        dest: ~/.bashrc
        line: "eval $(keychain --eval --quiet $HOME/.ssh/id_rsa)"
        create: yes

    - name: vim config
      copy:
        src: config/nvim
        dest: ~/.config

    - name: idea vim rc file
      copy:
        src: config/ideavimrc
        dest: ~/.ideavimrc

    - name: vim mappings
      vars:
        mappings:
          - 'map <leader>y "+'
          - "nnoremap <A-j> :m .+1<CR>=="
          - "nnoremap <A-k> :m .-2<CR>=="
          - "inoremap <A-j> <Esc>:m .+1<CR>==gi"
          - "inoremap <A-k> <Esc>:m .-2<CR>==gi"
          - "vnoremap <A-j> :m '>+1<CR>gv=gv"
          - "vnoremap <A-k> :m '<-2<CR>gv=gv"
          - "nnoremap <Space> @q"
        files:
          - "~/.ideavimrc"
          - "~/.config/nvim/init.vim"

      with_nested:
        - "{{files}}"
        - "{{mappings}}"

      lineinfile:
        dest: "{{item[0]}}"
        line: "{{item[1]}}"
        create: yes

    - name: taskwarrior rc file
      vars:
        options:
          - 'uda.module.type=string'
          - 'context.work=+work'
          - 'context.other=+other'
          - 'report.long.columns=id,start.active,entry,modified.age,depends,priority,project,module,tags,recur,wait.remaining,scheduled,due,until,description'
          - 'report.long.labels=ID,A,Created,Mod,Deps,P,Project,Module,Tags,Recur,Wait,Sched,Due,Until,Description'
          - 'report.completed.columns=id,uuid.short,entry,end,entry.age,depends,priority,project,module,tags,recur.indicator,due,description'
          - 'report.completed.labels=ID,UUID,Created,Completed,Age,Deps,P,Project,Module,Tags,R,Due,Description'
          - 'data.location=~/.task'
      with_items: "{{ options }}"
      lineinfile:
        dest: ~/.taskrc
        line: "{{ item }}"
        create: yes

    - name: Fonts -- lcdfilter
      lineinfile:
        dest: ~/.Xresources
        regexp: "^Xft.lcdfilter:"
        line: "Xft.lcdfilter: lcddefault"
        create: yes


- hosts: localhost
  name: cron
  tags: cron
  tasks:
    - name: taskwarrior data commit & push
      cron:
        name: taskwarrior
        hour: 10
        minute: 0
        user: hanny
        job: 'cd /home/hanny/.task; git add *.data && git commit -m "automatic commit" && git push'
